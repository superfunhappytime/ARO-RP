{"version":3,"sources":["SSHModal.tsx","Request.tsx","ClusterDetailList.tsx","ClusterDetail.tsx","Kubeconfig.tsx","ClusterList.tsx","App.tsx","index.tsx"],"names":["cancelIcon","iconName","copyIcon","machineOptions","key","text","theme","getTheme","contentStyles","mergeStyleSets","container","display","flexFlow","alignItems","header","flex","borderTop","palette","themePrimary","color","neutralPrimary","fontSize","FontSizes","xLargePlus","fontWeight","FontWeights","semibold","padding","body","overflowY","selectors","margin","marginTop","marginBottom","iconButtonStyles","root","marginLeft","marginRight","rootHovered","neutralDark","SSHModal","forwardRef","ref","csrfToken","useBoolean","isModalOpen","showModal","setTrue","hideModal","setFalse","titleId","useId","update","requestSSH","sshRequested","useState","resourceID","setResourceID","machineName","setMachineName","requestable","setRequestable","setUnrequestable","data","setData","error","setError","useImperativeHandle","LoadSSH","item","useEffect","a","axios","method","url","master","headers","current","result","response","fetchData","onChange","event","option","Modal","titleAriaId","isOpen","onDismiss","isModeless","containerClassName","className","id","IconButton","styles","iconProps","ariaLabel","onClick","href","MessageBar","messageBarType","MessageBarType","isMultiline","dismissButtonAriaLabel","statusText","Stack","horizontal","verticalAlign","Item","grow","TextField","label","value","command","readOnly","_","navigator","clipboard","writeText","password","type","canRevealPassword","tokens","childrenGap","Dropdown","options","PrimaryButton","disabled","OnError","err","status","document","location","FetchClusters","FetchClusterInfo","subscription","resourceGroup","name","FetchInfo","ProcessLogOut","console","log","RequestKubeconfig","clusterID","clusterDetailHeadings","apiServerVisibility","apiServerURL","architectureVersion","consoleLink","createdAt","createdBy","failedProvisioningState","infraId","lastAdminUpdateError","lastModifiedAt","lastModifiedBy","lastProvisioningState","provisioningState","resourceId","version","installStatus","ShimmerStyle","headShimmerStyle","headerShimmer","ShimmerElementType","line","height","width","rowShimmer","KeyColumnStyle","paddingTop","paddingRight","ValueColumnStyle","KeyStyle","fontStyle","alignSelf","fontVariantAlternates","paddingBottom","ValueStyle","ClusterDetailCell","style","Text","variant","ClusterDetailComponent","props","headerEntries","Object","entries","this","detailPanelVisible","filteredHeaders","length","filter","element","toString","push","contentStackStylesNormal","clusterName","map","index","Array","fill","Shimmer","shimmerElements","Component","navStyles","link","whiteSpace","lineHeight","groupContent","customPanelStyle","top","left","content","paddingLeft","errorBarStyles","ClusterDetailPanel","state","useRef","fetching","setFetching","openPanel","dismissPanel","dataLoaded","setDataLoaded","setdetailPanelVisible","loaded","currentCluster","resource","then","newData","setState","navLinkGroups","links","useHistory","pathname","icon","Panel","PanelType","custom","onClose","isBlocking","closeButtonAriaLabel","headerText","Nav","onLinkClick","ev","groups","initialSelectedKey","Separator","vertical","isDataLoaded","KubeconfigButton","buttonRef","blob","Blob","request","fileDownloadUrl","URL","createObjectURL","filename","parseContentDisposition","parameters","useLayoutEffect","download","click","revokeObjectURL","TooltipHost","aria-label","registerIcons","icons","xmlns","viewBox","d","classNames","controlWrapper","flexWrap","fullWidth","fileIconImg","maxHeight","maxWidth","headerIcon","iconContainer","controlButtonContainer","titleText","subtitleText","itemsCount","controlStyles","separatorStyle","clusterListDetailStyles","headerWrapper","clusterListDetailStylesSmall","overflow","ClusterListComponent","_sshModal","_setCurrentCluster","_onChangeText","items","i","toLowerCase","indexOf","_onColumnClick","column","columns","newColumns","slice","currColumn","currCol","forEach","newCol","isSortedDescending","isSorted","sshModalRef","setCurrentCluster","fieldName","minWidth","isRowHeader","isPadded","onRender","src","alt","flexGrow","isResizable","sortAscendingAriaLabel","sortDescendingAriaLabel","onColumnClick","Link","_onClusterInfoLinkClick","failed","_onSSHClick","modalOpen","myStyle","showColumns","placeholder","DetailsList","selectionMode","SelectionMode","none","getKey","_getKey","setKey","layoutMode","DetailsListLayoutMode","fixedColumns","isHeaderVisible","onItemInvoked","_onItemInvoked","modal","thisCluster","alert","ClusterList","updateData","_items","CommandBar","sshBox","containerStackTokens","appStackTokens","stackStyles","headerTextStyles","contentStackStylesSmall","stackNavStyles","MenuButtonStyles","DefaultPalette","white","darkTheme","semanticColors","bodyBackground","bodyText","navPanelStyles","navigation","justifyContent","clusterRegex","withRouter","csrf","elevated","username","contentStackStyles","setContentStackStyles","setShowColumns","sshRef","csrfRef","history","routeObjs","exec","checkRoute","onRenderNavigationContent","useCallback","defaultRender","horizontalAlign","isLightDismiss","smallFixedNear","ThemeProvider","hidden","Icon","clusterDetail","replace","initializeIcons","mergeStyles","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4301298c.chunk.js","sourcesContent":["import {useId, useBoolean} from \"@fluentui/react-hooks\"\nimport {\n  Modal,\n  getTheme,\n  mergeStyleSets,\n  FontWeights,\n  IIconProps,\n  Dropdown,\n  IDropdownOption,\n  TextField,\n  MessageBar,\n  MessageBarType,\n  Stack,\n  FontSizes,\n} from \"@fluentui/react\"\nimport {PrimaryButton, IconButton} from \"@fluentui/react/lib/Button\"\nimport axios, {AxiosResponse} from \"axios\"\nimport React, {useState, useImperativeHandle, useEffect, forwardRef, MutableRefObject} from \"react\"\n\nconst cancelIcon: IIconProps = {iconName: \"Cancel\"}\nconst copyIcon: IIconProps = {iconName: \"Copy\"}\n\nconst machineOptions = [\n  {key: 1, text: \"master-1\"},\n  {key: 2, text: \"master-2\"},\n  {key: 3, text: \"master-3\"},\n]\n\ntype SSHModalProps = {\n  csrfToken: MutableRefObject<string>\n}\n\nconst theme = getTheme()\nconst contentStyles = mergeStyleSets({\n  container: {\n    display: \"flex\",\n    flexFlow: \"column nowrap\",\n    alignItems: \"stretch\",\n  },\n  header: [\n    {\n      flex: \"1 1 auto\",\n      borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: \"flex\",\n      alignItems: \"center\",\n      fontSize: FontSizes.xLargePlus,\n      fontWeight: FontWeights.semibold,\n      padding: \"12px 12px 14px 24px\",\n    },\n  ],\n  body: {\n    flex: \"4 4 auto\",\n    padding: \"0 24px 24px 24px\",\n    overflowY: \"hidden\",\n    selectors: {\n      \"p\": {margin: \"14px 0\"},\n      \"p:first-child\": {marginTop: 0},\n      \"p:last-child\": {marginBottom: 0},\n    },\n  },\n})\n\nconst iconButtonStyles = {\n  root: {\n    color: theme.palette.neutralPrimary,\n    marginLeft: \"auto\",\n    marginTop: \"4px\",\n    marginRight: \"2px\",\n  },\n  rootHovered: {\n    color: theme.palette.neutralDark,\n  },\n}\n\nconst sshDocs: string =\n  \"https://msazure.visualstudio.com/AzureRedHatOpenShift/_wiki/wikis/ARO.wiki/136823/ARO-SRE-portal?anchor=ssh-(elevated)\"\n\nexport const SSHModal = forwardRef<any, SSHModalProps>(({csrfToken}, ref) => {\n  const [isModalOpen, {setTrue: showModal, setFalse: hideModal}] = useBoolean(false)\n\n  const titleId = useId(\"title\")\n  const [update, {setTrue: requestSSH, setFalse: sshRequested}] = useBoolean(false)\n  const [resourceID, setResourceID] = useState(\"\")\n  const [machineName, setMachineName] = useState<IDropdownOption>()\n  const [requestable, {setTrue: setRequestable, setFalse: setUnrequestable}] = useBoolean(false)\n  const [data, setData] = useState<{command: string; password: string} | null>()\n  const [error, setError] = useState<AxiosResponse | null>(null)\n\n  useImperativeHandle(ref, () => ({\n    LoadSSH: (item: string) => {\n      setUnrequestable()\n      setData(null)\n      setError(null)\n      showModal()\n      setResourceID(item)\n    },\n  }))\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setError(null)\n        const result = await axios({\n          method: \"post\",\n          url: resourceID + \"/ssh/new\",\n          data: {\n            master: machineName?.key,\n          },\n          headers: {\"X-CSRF-Token\": csrfToken.current},\n        })\n        setData(result.data)\n        setRequestable()\n      } catch (error) {\n        setRequestable()\n        setError(error.response)\n      }\n    }\n    if (update && machineName) {\n      sshRequested()\n      fetchData()\n    }\n    return\n  }, [resourceID, machineName, csrfToken, update, sshRequested, setRequestable])\n\n  const onChange = (\n    event: React.FormEvent<HTMLDivElement>,\n    option?: IDropdownOption<any>\n  ): void => {\n    setMachineName(option)\n    setRequestable()\n  }\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  const selectionField = (): any => {\n    return (\n      <Stack tokens={{childrenGap: 15}}>\n        <Dropdown label={`Machine Selection`} onChange={onChange} options={machineOptions} />\n        <PrimaryButton onClick={requestSSH} text=\"Request\" disabled={!requestable} />\n      </Stack>\n    )\n  }\n\n  const dataResult = (): any => {\n    return (\n      <div>\n        <Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField label=\"Command\" value={data?.command} readOnly />\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy command\"\n                onClick={(_) => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.command)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n          <Stack horizontal verticalAlign={\"end\"}>\n            <Stack.Item grow>\n              <TextField\n                label=\"Password\"\n                value={data?.password}\n                type=\"password\"\n                canRevealPassword\n                readOnly\n              />{\" \"}\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={copyIcon}\n                ariaLabel=\"Copy password\"\n                onClick={(_) => {\n                  if (data) {\n                    navigator.clipboard.writeText(data.password)\n                  }\n                }}\n              />\n            </Stack.Item>\n          </Stack>\n        </Stack>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <Modal\n        titleAriaId={titleId}\n        isOpen={isModalOpen}\n        onDismiss={hideModal}\n        isModeless={true}\n        containerClassName={contentStyles.container}\n      >\n        <div className={contentStyles.header}>\n          <span id={titleId}>SSH Access</span>\n          <IconButton\n            styles={iconButtonStyles}\n            iconProps={cancelIcon}\n            ariaLabel=\"Close popup modal\"\n            onClick={hideModal}\n          />\n        </div>\n\n        <div className={contentStyles.body}>\n          <p>\n            Before requesting SSH access, please ensure you have read the{\" \"}\n            <a href={sshDocs}>SSH docs</a>.\n          </p>\n          {error && errorBar()}\n          {data ? dataResult() : selectionField()}\n        </div>\n      </Modal>\n    </div>\n  )\n})\n","import axios, {AxiosResponse} from \"axios\"\n\nconst OnError = (err: AxiosResponse): AxiosResponse | null => {\n  if (err.status === 403) {\n    document.location.href = \"/api/login\"\n    return null\n  } else {\n    return err\n  }\n}\n\nexport const FetchClusters = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/clusters\")\n    return result\n  } catch (e) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchClusterInfo = async (subscription: string, resourceGroup: string, name: string): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/\" + subscription + \"/\" + resourceGroup +  \"/\" + name + \"/clusterinfo\")\n    return result\n  } catch (e) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const FetchInfo = async (): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios(\"/api/info\")\n    return result\n  } catch (e) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n\nexport const ProcessLogOut = async (): Promise<any> => {\n  try {\n    const result = await axios({method: \"POST\", url: \"/api/logout\"})\n    return result\n  } catch (e) {\n    let err = e.response as AxiosResponse\n    console.log(err)\n  }\n  document.location.href = \"/api/login\"\n}\n\nexport const RequestKubeconfig = async (\n  csrfToken: string,\n  clusterID: string\n): Promise<AxiosResponse | null> => {\n  try {\n    const result = await axios({\n      method: \"POST\",\n      url: clusterID + \"/kubeconfig/new\",\n      headers: {\n        \"X-CSRF-Token\": csrfToken,\n      },\n    })\n    return result\n  } catch (e) {\n    let err = e.response as AxiosResponse\n    return OnError(err)\n  }\n}\n","import { IShimmerStyles, Shimmer, ShimmerElementsGroup, ShimmerElementType } from '@fluentui/react/lib/Shimmer';\nimport { Component } from \"react\"\nimport { Stack, Text, IStackStyles, IStackItemStyles } from '@fluentui/react';\nimport { contentStackStylesNormal } from \"./App\"\n\ninterface ClusterDetailComponentProps {\n  item: any\n  clusterName: string\n  isDataLoaded: boolean\n  detailPanelVisible: string\n}\n\ninterface IClusterDetailComponentState {\n  item: IClusterDetails // why both state and props?\n}\n\nexport interface IClusterDetails {\n  apiServerVisibility: string\n  apiServerURL: string\n  architectureVersion: string\n  consoleLink: string\n  createdAt: string\n  createdBy: string\n  failedProvisioningState: string\n  infraId: string\n  lastAdminUpdateError: string\n  lastModifiedAt: string\n  lastModifiedBy: string\n  lastProvisioningState: string\n  location: string\n  name: string\n  provisioningState: string\n  resourceId: string\n  version: string\n  installStatus: string\n}\n\nconst clusterDetailHeadings : IClusterDetails = {\n  apiServerVisibility: 'ApiServer Visibility',\n  apiServerURL: 'ApiServer URL',\n  architectureVersion: 'Architecture Version',\n  consoleLink: 'Console Link',\n  createdAt: 'Created At',\n  createdBy: 'Created By',\n  failedProvisioningState: 'Failed Provisioning State',\n  infraId: 'Infra Id',\n  lastAdminUpdateError: 'Last Admin Update Error',\n  lastModifiedAt: 'Last Modified At',\n  lastModifiedBy: 'Last Modified By',\n  lastProvisioningState: 'Last Provisioning State',\n  location: 'Location',\n  name: 'Name',\n  provisioningState: 'Provisioning State',\n  resourceId: 'Resource Id',\n  version: 'Version',\n  installStatus: 'Installation Status'\n}\n\nconst ShimmerStyle: Partial<IShimmerStyles> = {\n  root: {\n    margin: \"11px 0\"\n  }\n}\n\nconst headShimmerStyle: Partial<IShimmerStyles> = {\n  root: {\n    margin: \"15px 0\"\n  }\n}\n\nconst headerShimmer = [\n  { type: ShimmerElementType.line, height: 32, width: '25%' },\n]\n\nconst rowShimmer = [\n  { type: ShimmerElementType.line, height: 18, width: '75%' },\n]\n\nconst KeyColumnStyle: Partial<IStackStyles> = {\n  root: {\n    paddingTop: 10,\n    paddingRight: 15,\n  }\n}\n\nconst ValueColumnStyle: Partial<IStackStyles> = {\n  root: {\n    paddingTop: 10,\n  }\n}\n\nconst KeyStyle: IStackItemStyles = {\n  root: {\n    fontStyle: \"bold\",\n    alignSelf: \"flex-start\",\n    fontVariantAlternates: \"bold\",\n    color: \"grey\",\n    paddingBottom: 10\n  }\n}\n\nconst ValueStyle: IStackItemStyles = {\n  root: {\n    paddingBottom: 10\n  }\n}\n\nfunction ClusterDetailCell(\n  value: any,\n): any {\n  if (typeof (value.value) == typeof (\" \")) {\n    return <Stack.Item styles={value.style}>\n      <Text styles={value.style} variant={'medium'}>{value.value}</Text>\n    </Stack.Item>\n  }\n};\n\nexport class ClusterDetailComponent extends Component<ClusterDetailComponentProps, IClusterDetailComponentState> {\n\n  constructor(props: ClusterDetailComponentProps | Readonly<ClusterDetailComponentProps>) {\n    super(props);\n  }\n\n  public render() {\n    const headerEntries = Object.entries(clusterDetailHeadings)\n    switch (this.props.detailPanelVisible) {\n      case \"Overview\":\n        {\n          var filteredHeaders: Array<[string, any]> = []\n          if (this.props.item.length != 0) {\n            headerEntries.filter((element: [string, any]) => {\n              if (this.props.item[element[0]] != null &&\n                  this.props.item[element[0]].toString().length > 0) {\n                    filteredHeaders.push(element)\n                  }\n            })\n          return (\n            <Stack styles={contentStackStylesNormal}>\n              <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n                <Stack horizontal>\n                  <Stack styles={KeyColumnStyle}>\n                    {filteredHeaders.map((value: [string, any], index: number) => (\n                      <ClusterDetailCell style={KeyStyle} key={index} value={value[1]} />\n                    )\n                    )}\n                  </Stack>\n\n                  <Stack styles={KeyColumnStyle}>\n                    {Array(filteredHeaders.length).fill(':').map((value: [string], index: number) => (\n                      <ClusterDetailCell style={KeyStyle} key={index} value={value} />\n                    )\n                    )}\n                  </Stack>\n\n                  <Stack styles={ValueColumnStyle}>\n                    {filteredHeaders.map((value: [string, any], index: number) => (\n                      <ClusterDetailCell style={ValueStyle}\n                        key={index}\n                        value={this.props.item[value[0]]} />\n                      )\n                    )}\n                  </Stack>\n                </Stack>\n            </Stack>\n          );\n          } else {\n            return (\n              <Stack>\n                <Shimmer styles={headShimmerStyle} shimmerElements={headerShimmer} width=\"25%\"></Shimmer>\n                {headerEntries.map(() => (\n                  <Shimmer styles={ShimmerStyle} shimmerElements={rowShimmer} width=\"75%\"></Shimmer>\n                  )\n                )}\n              </Stack>\n            )\n          }\n        } break;\n      case \"Nodes\":\n        {\n          return (\n            <Stack styles={contentStackStylesNormal}>\n              <Text variant=\"xxLarge\">{this.props.clusterName}</Text>\n              <Stack horizontal>\n                <Stack styles={KeyColumnStyle}>\n                  Node detail\n                </Stack>\n\n                <Stack styles={KeyColumnStyle}>\n                  Node detail2\n                </Stack>\n\n                <Stack styles={ValueColumnStyle}>\n                  Node detail3\n                </Stack>\n              </Stack>\n            </Stack>\n          );\n        } break;\n    }\n  }\n};\n","import { IPanelStyles, Panel, PanelType } from '@fluentui/react/lib/Panel';\nimport { useBoolean } from '@fluentui/react-hooks';\nimport { useState, useEffect, useRef, MutableRefObject } from \"react\"\nimport { IMessageBarStyles, MessageBar, MessageBarType, Stack, Separator } from '@fluentui/react';\nimport { AxiosResponse } from 'axios';\nimport { FetchClusterInfo } from './Request';\nimport { IClusterDetail, contentStackStylesNormal } from \"./App\"\nimport { Nav, INavLink, INavLinkGroup, INavStyles } from '@fluentui/react/lib/Nav';\nimport { ClusterDetailComponent } from './ClusterDetailList'\nimport { useHistory } from \"react-router-dom\"\n\n\nconst navStyles: Partial<INavStyles> = {\n  root: {\n    width: 155,\n    paddingRight: \"10px\"\n  },\n  link: {\n    whiteSpace: 'normal',\n    lineHeight: 'inherit',\n  },\n  groupContent: {\n    marginBottom: \"0px\"\n  }\n};\n\nconst customPanelStyle: Partial<IPanelStyles> = {\n  root: { top: \"40px\", left: \"225px\" },\n  content: { paddingLeft: 5, paddingRight: 5, },\n}\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nexport function ClusterDetailPanel(props: {\n  csrfToken: MutableRefObject<string>\n  currentCluster: IClusterDetail\n  onClose: any // TODO: function ptr .. any probably bad\n  loaded: string\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterDetailComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n  const [resourceID, setResourceID] = useState(\"\")\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false); // panel controls\n  const [dataLoaded, setDataLoaded] = useState<boolean>(false);\n  const [detailPanelVisible, setdetailPanelVisible] = useState<string>(\"Overview\");\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // updateData - updates the state of the component\n  // can be used if we want a refresh button.\n  // api/clusterdetail returns a single item.\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ item: newData })\n    }\n  }\n\n  const _dismissPanel = () => {\n    dismissPanel()\n    props.currentCluster.clusterName = \"\"\n    props.onClose() // useEffect?\n    setDataLoaded(false);\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        setDataLoaded(true);\n      } else {\n        setError(result)\n      }\n      setFetching(props.currentCluster.clusterName)\n    }\n\n    if (fetching === \"\" && props.loaded === \"DONE\" && props.currentCluster.clusterName != \"\") {\n      setFetching(\"FETCHING\")\n      FetchClusterInfo(props.currentCluster.subscription, props.currentCluster.resource, props.currentCluster.clusterName).then(onData) // TODO: fetchClusterInfo accepts IClusterDetail\n    }\n  }, [data, fetching, setFetching])\n\n\n  useEffect(() => {\n    if (props.currentCluster.clusterName != \"\") {\n      if (props.currentCluster.clusterName == fetching) {\n        openPanel()\n        setDataLoaded(true);\n      } else {\n        setData([])\n        setFetching(\"\")\n        setDataLoaded(false); // activate shimmer\n        openPanel()\n      }\n    }\n  }, [props.currentCluster.clusterName])\n\n  function _onLinkClick(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) {\n    if (item && item.name !== '') {\n      setdetailPanelVisible(item.name)\n    }\n  }\n\n  const history = useHistory();\n\n  var navLinkGroups = [\n    {\n      links: [\n        {\n          name: 'Overview',\n          key: 'overview',\n          url: '#' + history.location.pathname + \"/overview\",\n          icon: 'ThisPC',\n        },\n      ],\n    },\n  ];\n\n  // TODO: props.loaded rename to CSRFTokenAvailable\n  return (\n    <Panel\n      isOpen={isOpen}\n      type={PanelType.custom}\n      onDismiss={_dismissPanel}\n      isBlocking={false}\n      styles={customPanelStyle}\n      closeButtonAriaLabel=\"Close\"\n      headerText={resourceID}\n    >\n      <Stack styles={contentStackStylesNormal}>\n        <Stack.Item grow>{error && errorBar()}</Stack.Item>\n        <Stack horizontal>\n          <Stack.Item>\n            <Nav\n              onLinkClick={_onLinkClick}\n              ariaLabel=\"Select a tab to view\"\n              styles={navStyles}\n              groups={navLinkGroups}\n              initialSelectedKey={\"overview\"}\n            />\n          </Stack.Item>\n          <Separator vertical />\n          <Stack.Item grow>\n            <ClusterDetailComponent\n              item={data}\n              clusterName={props.currentCluster.clusterName}\n              isDataLoaded={dataLoaded}\n              detailPanelVisible={detailPanelVisible}\n            />\n          </Stack.Item>\n        </Stack>\n      </Stack>\n    </Panel>\n  )\n}\n","import {IconButton, TooltipHost} from \"@fluentui/react\"\nimport {AxiosResponse} from \"axios\"\nimport {RequestKubeconfig} from \"./Request\"\nimport {MutableRefObject, useEffect, useLayoutEffect} from \"react\"\nimport {useState} from \"react\"\nimport {useRef} from \"react\"\nimport {forwardRef} from \"react\"\nimport {parse as parseContentDisposition} from \"content-disposition\"\n\ntype KubeconfigButtonProps = {\n  csrfToken: MutableRefObject<string>\n  clusterID: string\n}\n\ntype FileDownload = {\n  name: string\n  content: string\n}\n\nexport const KubeconfigButton = forwardRef<any, KubeconfigButtonProps>(\n  ({csrfToken, clusterID}, ref) => {\n    const [data, setData] = useState<FileDownload>({name: \"\", content: \"\"})\n    const [error, setError] = useState<AxiosResponse | null>(null)\n    const [fetching, setFetching] = useState(\"DONE\")\n    const buttonRef = useRef<HTMLAnchorElement | null>(null)\n\n    useEffect(() => {\n      const onData = (result: AxiosResponse | null) => {\n        if (result?.status === 200) {\n          const blob = new Blob([result.request.response])\n          const fileDownloadUrl = URL.createObjectURL(blob)\n          const filename = parseContentDisposition(result.headers[\"content-disposition\"]).parameters\n            .filename\n          setData({content: fileDownloadUrl, name: filename})\n        } else {\n          setError(result)\n        }\n        setFetching(\"DONE\")\n      }\n\n      if (fetching === \"\") {\n        setFetching(\"FETCHING\")\n        RequestKubeconfig(csrfToken.current, clusterID).then(onData)\n      }\n    }, [fetching, error, data, clusterID, csrfToken])\n\n    useLayoutEffect(() => {\n      if (data.content && buttonRef && buttonRef.current) {\n        buttonRef.current.href = data.content\n        buttonRef.current.download = data.name\n        buttonRef.current.click()\n        URL.revokeObjectURL(data.content)\n        data.content = \"\"\n      }\n    }, [data])\n\n    return (\n      <>\n        <TooltipHost content={`Download Kubeconfig`}>\n          <IconButton\n            iconProps={{iconName: \"HardDriveGroup\"}}\n            disabled={fetching === \"FETCHING\"}\n            aria-label=\"Download Kubeconfig\"\n            onClick={(_) => setFetching(\"\")}\n          />\n          <a style={{display: \"none\"}} ref={buttonRef} href={\"#\"}>\n            dl\n          </a>\n        </TooltipHost>\n      </>\n    )\n  }\n)\n","import React, { useState, useEffect, useRef, MutableRefObject, Component, SyntheticEvent } from \"react\"\nimport {\n  Stack,\n  IconButton,\n  MessageBarType,\n  MessageBar,\n  CommandBar,\n  ICommandBarItemProps,\n  Separator,\n  Text,\n  IMessageBarStyles,\n  mergeStyleSets,\n  TooltipHost,\n  TextField,\n  Link,\n  ShimmeredDetailsList,\n  registerIcons,\n} from \"@fluentui/react\"\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n  IDetailsListStyles,\n} from \"@fluentui/react/lib/DetailsList\"\n\nimport { FetchClusters, FetchClusterInfo } from \"./Request\"\nimport { KubeconfigButton } from \"./Kubeconfig\"\nimport { AxiosResponse } from \"axios\"\nimport { IClusterDetail } from \"./App\"\n\nvar currentName: string\nvar currentSubscription: string\nvar currentResourceGroup: string\n\nregisterIcons({\n  icons: {\n    'openshift-svg': (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 64 64\">\n        <g fill=\"#0078d4\">\n          <path d=\"M17.424 27.158L7.8 30.664c.123 1.545.4 3.07.764 4.566l9.15-3.333c-.297-1.547-.403-3.142-.28-4.74M60 16.504c-.672-1.386-1.45-2.726-2.35-3.988l-9.632 3.506c1.12 1.147 2.06 2.435 2.83 3.813z\" />\n          <path d=\"M38.802 13.776c2.004.935 3.74 2.21 5.204 3.707l9.633-3.506a27.38 27.38 0 0 0-10.756-8.95c-13.77-6.42-30.198-.442-36.62 13.326a27.38 27.38 0 0 0-2.488 13.771l9.634-3.505c.16-2.087.67-4.18 1.603-6.184 4.173-8.947 14.844-12.83 23.79-8.658\" />\n        </g>\n        <path d=\"M9.153 35.01L0 38.342c.84 3.337 2.3 6.508 4.304 9.33l9.612-3.5a17.99 17.99 0 0 1-4.763-9.164\" fill=\"#0078d4\" />\n        <path d=\"M49.074 31.38a17.64 17.64 0 0 1-1.616 6.186c-4.173 8.947-14.843 12.83-23.79 8.657a17.71 17.71 0 0 1-5.215-3.7l-9.612 3.5c2.662 3.744 6.293 6.874 10.748 8.953 13.77 6.42 30.196.44 36.618-13.328a27.28 27.28 0 0 0 2.479-13.765l-9.61 3.498z\" fill=\"#0078d4\" />\n        <path d=\"M51.445 19.618l-9.153 3.332c1.7 3.046 2.503 6.553 2.24 10.08l9.612-3.497c-.275-3.45-1.195-6.817-2.7-9.915\" fill=\"#0078d4\" />\n      </svg>\n    )\n  },\n})\n\ninterface ICluster {\n  key: string\n  name: string\n  subscription: string\n  resourceGroup: string\n  id: string\n  version: string\n  createdDate: string\n  provisionedBy: string\n  lastModified: string\n  state: string\n  failed: string\n  consoleLink: string\n}\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nconst classNames = mergeStyleSets({\n  controlWrapper: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  fileIconImg: {\n    verticalAlign: \"middle\",\n    maxHeight: \"20px\",\n    maxWidth: \"20px\",\n  },\n  headerIcon: {\n    height: 18,\n    paddingTop: 1,\n  },\n  iconContainer: {\n    margin: \"-11px 0px\",\n    height: 42,\n  },\n  controlButtonContainer: {\n    paddingLeft: 0,\n  },\n  titleText: {\n    fontWeight: 600,\n    fontSize: 24,\n    lineHeight: 32,\n  },\n  subtitleText: {\n    color: \"#646464\",\n    fontSize: 12,\n    lineHeight: 14,\n    margin: 0,\n  },\n  itemsCount: {\n    padding: \"10px 0px\",\n  },\n})\n\nconst controlStyles = {\n  root: {\n    paddingLeft: 0,\n  },\n}\n\nconst separatorStyle = {\n  root: {\n    fontSize: 0,\n    marginBottom: 20,\n    padding: 0,\n  },\n}\n\ninterface IClusterListState {\n  columns: IColumn[]\n  items: ICluster[]\n  modalOpen: boolean\n}\n\nconst clusterListDetailStyles: Partial<IDetailsListStyles> = {\n  headerWrapper: {\n    marginTop: \"-16px\",\n  },\n}\n\nconst clusterListDetailStylesSmall: Partial<IDetailsListStyles> = {\n  root: {\n    overflow: \"hidden\",\n  },\n  headerWrapper: {\n    marginTop: \"-16px\",\n  },\n}\n\ninterface ClusterListComponentProps {\n  items: ICluster[]\n  sshModalRef: MutableRefObject<any>\n  setCurrentCluster: any // TODO: fix this. help function reference. Any... probably bad\n  csrfToken: MutableRefObject<string>\n  showColumns: Boolean\n}\n\nclass ClusterListComponent extends Component<ClusterListComponentProps, IClusterListState> {\n  private _sshModal: MutableRefObject<any>\n  private _setCurrentCluster: any // TODO: why, its already part of the props? any... probably bad\n\n  constructor(props: ClusterListComponentProps) {\n    super(props)\n\n    this._sshModal = props.sshModalRef\n    this._setCurrentCluster = props.setCurrentCluster\n\n    const columns: IColumn[] = [\n      {\n        key: \"icon\",\n        name: \"\",\n        fieldName: \"\",\n        minWidth: 24,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: false,\n        maxWidth: 24,\n        onRender: () => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <img src=\"/favicon.ico\" className={classNames.headerIcon} alt=\"\" />\n          </Stack>\n        ),\n      },\n      {\n        key: \"name\",\n        name: \"Name\",\n        fieldName: \"name\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        onRender: (item: ICluster) => (\n          <Link onClick={(_) => this._onClusterInfoLinkClick(item)} href={\"#\" + item.id + \"/overview\"}>\n            {item.name}\n          </Link>\n        ),\n        isPadded: true,\n      },\n      {\n        key: \"subscription\",\n        name: \"Subscription\",\n        fieldName: \"subscription\",\n        minWidth: 100,\n        flexGrow: 10,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"version\",\n        name: \"Version\",\n        fieldName: \"version\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"latestModified\",\n        name: \"Last Modified\",\n        fieldName: \"lastModified\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"createdDate\",\n        name: \"Creation Date\",\n        fieldName: \"createdDate\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"provisionedBy\",\n        name: \"Provisioned By\",\n        fieldName: \"provisionedBy\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"state\",\n        name: \"State\",\n        fieldName: \"state\",\n        minWidth: 100,\n        flexGrow: 5,\n        isRowHeader: true,\n        isResizable: true,\n        isSorted: true,\n        isSortedDescending: false,\n        sortAscendingAriaLabel: \"Sorted A to Z\",\n        sortDescendingAriaLabel: \"Sorted Z to A\",\n        onColumnClick: this._onColumnClick,\n        onRender: (item: ICluster) => (\n          <Text>\n            {item.state}{item.failed && \" - \" + item.failed}\n          </Text>\n        ),\n        data: \"string\",\n        isPadded: true,\n      },\n      {\n        key: \"icons\",\n        name: \"Actions\",\n        fieldName: \"icons\",\n        minWidth: 92,\n        flexGrow: 5,\n        isRowHeader: false,\n        data: \"string\",\n        isPadded: true,\n        onRender: (item: ICluster) => (\n          <Stack horizontal verticalAlign=\"center\" className={classNames.iconContainer}>\n            <TooltipHost content={`Prometheus`}>\n              <IconButton\n                iconProps={{ iconName: \"BIDashboard\" }}\n                aria-label=\"Prometheus\"\n                href={item.id + `/prometheus`}\n              />\n            </TooltipHost>\n            {/* <TooltipHost content={`OpenShift Console`}>\n              <IconButton\n                iconProps={{ iconName: \"openshift-svg\" }}\n                aria-label=\"Console\"\n                href={item.consoleLink}\n              />\n            </TooltipHost> */}\n            <TooltipHost content={`SSH`}>\n              <IconButton\n                iconProps={{ iconName: \"CommandPrompt\" }}\n                aria-label=\"SSH\"\n                onClick={(_) => this._onSSHClick(item)}\n              />\n            </TooltipHost>\n            <KubeconfigButton clusterID={item.id} csrfToken={props.csrfToken} />\n            {/* <TooltipHost content={`Geneva`}>\n              <IconButton\n                iconProps={{ iconName: \"Health\" }}\n                aria-label=\"Geneva\"\n                href={item.name + `/geneva`}\n              />\n            </TooltipHost> */}\n            {/* <TooltipHost content={`Upgrade`}>\n              <IconButton\n                iconProps={{ iconName: \"Up\" }}\n                aria-label=\"upgrade\"\n                href={item.name + `/upgrade`}\n              />\n            </TooltipHost>\n            <TooltipHost content={`Feature Flags`}>\n              <IconButton\n                iconProps={{ iconName: \"IconSetsFlag\" }}\n                aria-label=\"featureFlags\"\n                href={item.name + `/feature-flags`}\n              />\n            </TooltipHost> */}\n          </Stack>\n        ),\n      },\n    ]\n\n    this.state = {\n      items: this.props.items,\n      columns: columns,\n      modalOpen: false,\n    }\n  }\n\n  public render() {\n    var { columns, items } = this.state\n    var myStyle = clusterListDetailStyles\n\n    if ( !this.props.showColumns ) {\n      columns = [columns[0], columns[1]]\n      myStyle = clusterListDetailStylesSmall\n    }\n\n    return (\n      <Stack>\n        <div className={classNames.controlWrapper}>\n          <TextField placeholder=\"Filter on any field\" onChange={this._onChangeText} />\n        </div>\n        <Text className={classNames.itemsCount}>Showing {items.length} items</Text>\n        <DetailsList\n          items={items}\n          columns={columns}\n          selectionMode={SelectionMode.none}\n          getKey={this._getKey}\n          setKey=\"none\"\n          layoutMode={DetailsListLayoutMode.fixedColumns}\n          isHeaderVisible={true}\n          onItemInvoked={this._onItemInvoked}\n          styles={myStyle}\n        />\n      </Stack>\n    )\n  }\n\n  private _getKey(item: any, index?: number): string {\n    return item.key\n  }\n\n  private _onChangeText = (\n    ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    text?: string\n  ): void => {\n    this.setState({\n      items: text\n        ? this.props.items.filter((i) => i.name.toLowerCase().indexOf(text) > -1)\n        : this.props.items,\n    })\n  }\n\n  private _onSSHClick(item: any): void {\n    const modal = this._sshModal\n    if (modal && modal.current) {\n      modal.current.LoadSSH(item.id)\n    }\n  }\n\n  private _onClusterInfoLinkClick(item: ICluster): void { // TODO: item ---- should not be any, create an interface or something.\n    const thisCluster: IClusterDetail = {clusterName: item.name, subscription: item.subscription, resource: item.resourceGroup, resourceId: item.id}\n    this._setCurrentCluster(thisCluster)\n  }\n\n  private _onItemInvoked(item: any): void {\n    alert(`Item invoked: ${item.name}`)\n  }\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {\n    const { columns, items } = this.state\n    const newColumns: IColumn[] = columns.slice()\n    const currColumn: IColumn = newColumns.filter((currCol) => column.key === currCol.key)[0]\n    newColumns.forEach((newCol: IColumn) => {\n      if (newCol === currColumn) {\n        currColumn.isSortedDescending = !currColumn.isSortedDescending\n        currColumn.isSorted = true\n      } else {\n        newCol.isSorted = false\n        newCol.isSortedDescending = true\n      }\n    })\n    this.setState({\n      columns: newColumns,\n      items: items,\n    })\n  }\n}\n\nexport function ClusterList(props: {\n  csrfToken: MutableRefObject<string>\n  sshBox: MutableRefObject<any>\n  setCurrentCluster: any // TODO: fix this. probably bad - this is a helper function..\n  loaded: string\n  showColumns: Boolean\n}) {\n  const [data, setData] = useState<any>([])\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const state = useRef<ClusterListComponent>(null)\n  const [fetching, setFetching] = useState(\"\")\n\n  const errorBar = (): any => {\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Helper function to refresh the actual state of the DetailList\n  // see https://developer.microsoft.com/en-us/fluentui#/controls/web/detailslist#best-practices\n  const updateData = (newData: any) => {\n    setData(newData)\n    if (state && state.current) {\n      state.current.setState({ items: newData })\n    }\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\" && props.loaded === \"DONE\") {\n      setFetching(\"FETCHING\")\n      FetchClusters().then(onData)\n    }\n  }, [data, fetching, setFetching, props.loaded])\n\n  const _items: ICommandBarItemProps[] = [\n    {\n      key: \"refresh\",\n      text: \"Refresh\",\n      iconProps: { iconName: \"Refresh\" },\n      onClick: () => {\n        updateData([])\n        setFetching(\"\")\n      },\n    },\n  ]\n\n  return (\n    <Stack>\n      <span className={classNames.titleText}>Clusters</span>\n      <span className={classNames.subtitleText}>Azure Red Hat OpenShift</span>\n      <CommandBar\n        items={_items}\n        ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n        className={classNames.controlButtonContainer}\n        styles={controlStyles}\n      />\n      <Separator styles={separatorStyle} />\n\n      {error && errorBar()}\n      <ClusterListComponent\n        items={data}\n        ref={state} // why do we need ref here?\n        sshModalRef={props.sshBox}\n        setCurrentCluster={props.setCurrentCluster}\n        csrfToken={props.csrfToken}\n        showColumns={props.showColumns}\n      />\n    </Stack>\n  )\n}\n","import { useState, useEffect, useRef, useCallback, EffectCallback } from \"react\"\nimport {\n  Stack,\n  Text,\n  Panel,\n  IStackTokens,\n  IconButton,\n  IStackStyles,\n  DefaultPalette,\n  ThemeProvider,\n  PartialTheme,\n  PanelType,\n  IButtonStyles,\n  IPanelProps,\n  MessageBar,\n  IRenderFunction,\n  ITextStyles,\n  IPanelStyles,\n  TooltipHost,\n  IMessageBarStyles,\n  MessageBarType,\n  Icon,\n} from \"@fluentui/react\"\nimport { AxiosResponse } from \"axios\"\nimport { useBoolean } from \"@fluentui/react-hooks\"\nimport { SSHModal } from \"./SSHModal\"\nimport { ClusterDetailPanel } from \"./ClusterDetail\"\nimport { ClusterList } from \"./ClusterList\"\nimport { FetchInfo, ProcessLogOut } from \"./Request\"\nimport { useHistory, withRouter, BrowserRouter } from 'react-router-dom'\n\nconst containerStackTokens: IStackTokens = {}\nconst appStackTokens: IStackTokens = { childrenGap: 10 }\n\nconst errorBarStyles: Partial<IMessageBarStyles> = { root: { marginBottom: 15 } }\n\nconst stackStyles: IStackStyles = {\n  root: [\n    {\n      width: \"100%\",\n      padding: 0,\n    },\n  ],\n}\n\nconst headerTextStyles: ITextStyles = {\n  root: {\n    fontWeight: 600,\n  },\n}\n\nexport const contentStackStylesNormal: IStackStyles = {\n  root: [\n    {\n      padding: 20,\n    },\n  ],\n}\n\nconst contentStackStylesSmall: IStackStyles = {\n  root: [\n    {\n      padding: 20,\n      width: \"215px\",\n    },\n  ],\n}\n\n\nconst stackNavStyles: IStackStyles = {\n  root: {\n    padding: \"0px 15px\",\n    height: 40,\n  },\n}\n\nconst MenuButtonStyles: IButtonStyles = {\n  icon: { color: DefaultPalette.white },\n}\n\nconst darkTheme: PartialTheme = {\n  semanticColors: {\n    bodyBackground: DefaultPalette.themePrimary,\n    bodyText: DefaultPalette.white,\n  },\n}\n\nconst navPanelStyles: Partial<IPanelStyles> = {\n  navigation: {\n    height: 40,\n    lineHeight: 40,\n    fontSize: 15,\n    paddingLeft: 15,\n    justifyContent: \"start\",\n    alignItems: \"center\",\n  },\n}\n\nexport interface IClusterDetail {\n  subscription: string,\n  resource: string,\n  clusterName: string,\n  resourceId: string\n}\n\nexport const clusterRegex: RegExp = /^\\/subscriptions\\/(.*)\\/resourceGroups\\/(.*)\\/providers\\/Microsoft\\.RedHatOpenShift\\/openShiftClusters\\/(.*)\\/(\\w+)/;\n\nexport function checkRoute(history: string) {\n  console.log(history);\n  var output = clusterRegex.exec(history)\n\n  return output;\n}\n\nfunction App() {\n  const [data, updateData] = useState({ location: \"\", csrf: \"\", elevated: false, username: \"\" })\n  const [error, setError] = useState<AxiosResponse | null>(null)\n  const [isOpen, { setTrue: openPanel, setFalse: dismissPanel }] = useBoolean(false)\n  const [fetching, setFetching] = useState(\"\")\n  const [currentCluster, setCurrentCluster] = useState<IClusterDetail>({ subscription: \"\", resource: \"\", clusterName: \"\", resourceId: \"\" }) // TODO: probably not best practice ... nullable reference?\n\n  const [contentStackStyles, setContentStackStyles] = useState<IStackStyles>(contentStackStylesNormal)\n  const [showColumns, setShowColumns] = useState<Boolean>(true)\n  const sshRef = useRef<typeof SSHModal | null>(null)\n  const csrfRef = useRef<string>(\"\")\n\n  const history = useHistory()\n\n  // _setCurrentCluster is a helper function to wrap app state\n  // TODO: can we just pass in setCurrentCluster rather then _setCurrentCluster?\n  const _setCurrentCluster = (clusterDetail: IClusterDetail) => {\n    setCurrentCluster(clusterDetail)\n    setContentStackStyles(contentStackStylesSmall)\n    setShowColumns(false);\n    history.push(clusterDetail.resourceId)\n  }\n\n  const _onCloseDetailPanel = () => {\n    setContentStackStyles(contentStackStylesNormal)\n    setShowColumns(true);\n    history.replace(\"\")\n  }\n\n  useEffect(() => {\n    const onData = (result: AxiosResponse | null) => {\n      if (result?.status === 200) {\n        updateData(result.data)\n        csrfRef.current = result.data.csrf\n      } else {\n        setError(result)\n      }\n      setFetching(\"DONE\")\n    }\n\n    if (fetching === \"\") {\n      setFetching(\"FETCHING\")\n      FetchInfo().then(onData)\n    }\n  }, [fetching, error, data])\n\n  useEffect(() => {\n    var routeObjs = checkRoute(history.location.pathname)\n    if (routeObjs != null) {\n\n    }\n    console.log(routeObjs);\n  }, [])\n\n  const onRenderNavigationContent: IRenderFunction<IPanelProps> = useCallback(\n    (props, defaultRender) => (\n      <>\n        <IconButton iconProps={{ iconName: \"GlobalNavButton\" }} onClick={dismissPanel} />\n      </>\n    ),\n    [dismissPanel]\n  )\n\n  const logOut = () => {\n    ProcessLogOut()\n  }\n\n  const errorBar = (): any => {\n    console.log(error)\n    return (\n      <MessageBar\n        messageBarType={MessageBarType.error}\n        isMultiline={false}\n        onDismiss={() => setError(null)}\n        dismissButtonAriaLabel=\"Close\"\n        styles={errorBarStyles}\n      >\n        {error?.statusText}\n      </MessageBar>\n    )\n  }\n\n  // Application state maintains the current resource id/name/group\n  // when we click a thing set the state\n  // ...\n\n  return (\n    <>\n      <Stack styles={stackStyles} tokens={containerStackTokens} horizontalAlign={\"stretch\"}>\n        <Panel\n          isLightDismiss\n          styles={navPanelStyles}\n          type={PanelType.smallFixedNear}\n          isOpen={isOpen}\n          onDismiss={dismissPanel}\n          closeButtonAriaLabel=\"Close\"\n          onRenderNavigationContent={onRenderNavigationContent}\n        >\n          <p>regions go here</p>\n        </Panel>\n        <ThemeProvider theme={darkTheme}>\n          <Stack\n            grow\n            tokens={appStackTokens}\n            horizontalAlign={\"start\"}\n            verticalAlign={\"center\"}\n            horizontal\n            styles={stackNavStyles}\n          >\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"GlobalNavButton\" }}\n                onClick={openPanel}\n                styles={MenuButtonStyles}\n                disabled\n              />\n            </Stack.Item>\n            <Stack.Item grow>\n              <Text styles={headerTextStyles}>\n                ARO Portal {data.location ? \"(\" + data.location + \")\" : \"\"}\n              </Text>\n            </Stack.Item>\n            <Stack.Item>\n              <Text>{data.username}</Text>\n            </Stack.Item>\n\n            <Stack.Item hidden={!data.elevated}>\n              <TooltipHost content={`Elevated User`}>\n                <Icon iconName={\"Admin\"}></Icon>\n              </TooltipHost>\n            </Stack.Item>\n            <Stack.Item>\n              <IconButton\n                iconProps={{ iconName: \"SignOut\" }}\n                onClick={logOut}\n                styles={MenuButtonStyles}\n              />\n            </Stack.Item>\n          </Stack>\n        </ThemeProvider>\n        <Stack styles={contentStackStyles}>\n          <Stack.Item grow>{error && errorBar()}</Stack.Item>\n          <Stack.Item grow>\n            <ClusterList showColumns={showColumns} csrfToken={csrfRef} sshBox={sshRef} setCurrentCluster={_setCurrentCluster} loaded={fetching} />\n          </Stack.Item>\n          <Stack.Item grow>\n            <ClusterDetailPanel csrfToken={csrfRef} loaded={fetching} currentCluster={currentCluster} onClose={_onCloseDetailPanel} />\n          </Stack.Item>\n        </Stack>\n        <SSHModal csrfToken={csrfRef} ref={sshRef} />\n      </Stack>\n    </>\n  )\n}\n\nexport default withRouter(App)\n","import ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport {mergeStyles} from \"@fluentui/react\"\n\nimport {initializeIcons} from \"@fluentui/font-icons-mdl2\"\nimport { HashRouter } from \"react-router-dom\"\ninitializeIcons()\n\n// Inject some global styles\nmergeStyles({\n  \":global(body,html,#root)\": {\n    margin: 0,\n    padding: 0,\n    height: \"100vh\",\n  },\n})\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById(\"root\"))\n"],"sourceRoot":""}